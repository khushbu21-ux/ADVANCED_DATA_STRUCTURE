PROBLEM STATEMENT:
2.Implement Kruskal's Algorithm.

CODE IN JAVA:
import java.util.*;
class edge
{
	int source;
	int destination;
	int weight;
}
class Main
{
	public static void main(String[] args) 
	{
		Scanner sc= new Scanner(System.in);
		int V,E;
		System.out.println("Enter the number of vertices: ");
		V=sc.nextInt();
		System.out.println("Enter the number of edges: ");
		E=sc.nextInt();
		edge[] graph=new edge[E];
		for(int i = 0;i < E;i++) 
		{
			int src=0,dest=0,wt=0;
			System.out.println("For edge "+(i+1)+" enter source:");
			src=sc.nextInt();
			System.out.println("For edge "+(i+1)+" enter destination:");
			dest=sc.nextInt();
			System.out.println("For edge "+(i+1)+" enter weight:");
			wt=sc.nextInt();
			graph[i]=new edge();
			graph[i].source=src;
			graph[i].destination=dest;
			graph[i].weight=wt;
		}
		kruskal(graph,V,E);
		sc.close();
	}
	private static void kruskal(edge[] graph, int v, int e) 
	{
		for(int j=0;j<e;j++)
		{
			for(int i=0;i<e-1;i++)
			{
				if(graph[i].weight > graph[i+1].weight)
				{
				    int t;
					t=graph[i].weight;
					graph[i].weight=graph[i+1].weight;
					graph[i+1].weight=t;

					t=graph[i].source;
					graph[i].source=graph[i+1].source;
					graph[i+1].source=t;

					t=graph[i].destination;
					graph[i].destination=graph[i+1].destination;
					graph[i+1].destination=t;
				}
			}
		}
		edge[] newgraph = new edge[v-1];
		int[] parent=new int[v];
		for(int i=0;i<v;i++) 
			parent[i]=i;
		int count = 0;
		int i=0;
		while(count != v-1) 
		{
			edge current=graph[i];
			int sourceParent = findParent(current.source,parent);
			int destParent = findParent(current.destination,parent);
			if(sourceParent != destParent) 
			{
				newgraph[count] = current;
				count++;
				parent[sourceParent]=destParent;
			}
			i++;
		}
		System.out.println("Following are the edges in "
                           + "the constructed MST");
        int minimumCost = 0;
		for(i=0;i<v-1;i++) 
		{
			if(newgraph[i].source < newgraph[i].destination) 
				System.out.println(newgraph[i].source + " -- " + newgraph[i].destination + " == " + newgraph[i].weight);
			    minimumCost += newgraph[i].weight;
		    
		}
		System.out.println("The minimum Cost spanning tree is : "+minimumCost);
		
	}
	private static int findParent(int v, int[] parent) 
	{
		if(parent[v] == v) 
			return v;
		return findParent(parent[v],parent);
	}
}
