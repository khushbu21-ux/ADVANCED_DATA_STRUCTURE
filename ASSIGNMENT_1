PROBLEM STATEMENT :
1.Implement binary search tree and perform following operations: a. Insert, Delete, Display.

CODE IN JAVA:
import java.util.Scanner;
class BSTNode
{
    BSTNode left,right;
    int data;
    
    //constructor
    public BSTNode()
    {
        left = null;
        right = null;
        data = 0;
    }
    
    //constructor
    public BSTNode(int n)
    {
        left = null;
        right = null;
        data = n;
    }
    
    //Function to set left node
    public void setLeft(BSTNode n)
    {
        left = n;
    }
    
    //Function to set right node
    public void setRight(BSTNode n)
    {
        right = n;
    }
    
    //Function to get left  node
    public BSTNode getLeft()
    {
        return left;
    }
    
    //Function to get right node
    public BSTNode getRight()
    {
        return right;
    }
    
    //Function to set data from node
    public void setData(int d)
    {
        data = d;
    }
    
    //Function to get data from node
    public int getData()
    {
        return data;
    }
}

class BST
{
    private BSTNode root;
    
    //constructor
    public BST()
    {
        root = null;
    }
    
    //Function to check if tree is empty
    public boolean isEmpty()
    {
        return root == null;
    }
    
    //Function to insert data
    public void insert(int data)
    {
        root = insert(root,data);
    }
    
    //Function to insert data recursively
    private BSTNode insert(BSTNode node,int data)
    {
        if(node==null)
            node = new BSTNode(data);
        else
        {
            if(data<=node.getData())
                node.left = insert(node.left,data);
            else
                node.right = insert(node.right,data);
        }
        return node;
    }
    
    //Function to delete data
    public void delete(int k)
    {
        if(isEmpty())
            System.out.println("Tree Empty");
        else if(search(k) == false)
            System.out.println("Sorry "+k+" is not present");
        else
        {
            root = delete(root,k);
            System.out.println(k+" deleted from the tree");
        }
    }
    
    private BSTNode delete(BSTNode root,int k)
    {
        BSTNode p,p2,n;
        if(root.getData() == k)
        {
            BSTNode lt,rt;
            lt = root.getLeft();
            rt = root.getRight();
            if(lt == null && rt == null)
                return null;
            else if(lt == null)
            {
                p = rt;
                return p;
            }
            else if(rt == null)
            {
                p =lt;
                return p;
            }
            else
            {
                p2 = rt;
                p = rt;
                while(p.getLeft()!=null)
                {
                    p = p.getLeft();
                }
                p.setLeft(lt);
                return p2;
            }
        }
        if(k<root.getData())
        {
            n = delete(root.getLeft(),k);
            root.setLeft(n);
        }
        else
        {
            n =delete(root.getRight(),k);
            root.setRight(n);
        }
        return root;
    }
    
    //Function to search for an Element
    public boolean search(int val)
    {
        return search(root,val);
    }
    
    private boolean search(BSTNode r,int val)
    {
        boolean found = false;
        while((r!=null) && !found)
        {
            int rval = r.getData();
            if(val<rval)
                r = r.getLeft();
            else if(val>rval)
                r = r.getRight();
            else
            {
                found = true;
                break;
            }
            found = search(r,val);
        }
        return found;
    }
    
    public void inorder()
    {
        inorder(root);
    }
    
    private void inorder(BSTNode r)
    {
        if(r!=null)
        {
            inorder(r.getLeft());
            System.out.print(r.getData()+" ");
            inorder(r.getRight());
        }
    }
    
    public void preorder()
    {
        preorder(root);
    }
    
    private void preorder(BSTNode r)
    {
        if(r!=null)
        {
            System.out.print(r.getData()+" ");
            preorder(r.getLeft());
            preorder(r.getRight());
        }
    }
    
    public void postorder()
    {
        postorder(root);
    }
    
    private void postorder(BSTNode r)
    {
        if(r!=null)
        {
            postorder(r.getLeft());
            postorder(r.getRight());
            System.out.print(r.getData()+" ");
        }
    }
}

class Main
{
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);
        BST bst = new BST();
        char ch;
        do
        {
            System.out.println("\n------BINARY SEARCH TREE OPERATION-------\n");
            System.out.println("1.INSERT");
            System.out.println("2.DELETE");
            System.out.println("3.DISPLAY");
            System.out.println("4.ISEMPTY");
            int choice = scan.nextInt();
            switch(choice)
            {
                case 1:
                    System.out.println("Enter Integer to insert:");
                    bst.insert(scan.nextInt());
                    break;
                case 2:
                    System.out.println("Enter Integer to delete:");
                    bst.delete(scan.nextInt());
                    break;
                case 3:
                    System.out.println("-----DISPLAY----");
                    System.out.println("POST ORDER : ");
                    bst.postorder();
                    System.out.println("\nPRE ORDER : ");
                    bst.preorder();
                    System.out.println("\nIN ORDER : ");
                    bst.inorder();
                    break;
                case 4:
                    System.out.println("Empty Status = "+bst.isEmpty());
                    break;
            }
            System.out.println("\nDo you want to continue(Type y or n)");
            ch = scan.next().charAt(0);
        }
        while(ch == 'Y' || ch == 'y');
    }
}
